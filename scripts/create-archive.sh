#!/bin/bash

# Project Archive Creation Script
# Creates a complete .zip archive of the Arabic Election Campaign System

set -e

echo "üì¶ Creating project archive..."

# Get project name and version
PROJECT_NAME="arabic-election-system"
VERSION=$(node -p "require('./package.json').version")
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
ARCHIVE_NAME="${PROJECT_NAME}-v${VERSION}-${TIMESTAMP}"

echo "üè∑Ô∏è  Archive name: ${ARCHIVE_NAME}.zip"

# Create temporary directory for archive preparation
TEMP_DIR="temp-archive"
rm -rf "$TEMP_DIR"
mkdir -p "$TEMP_DIR/$ARCHIVE_NAME"

echo "üìÅ Preparing files for archive..."

# Copy project files (excluding node_modules, dist, and other build artifacts)
rsync -av \
  --exclude='node_modules' \
  --exclude='dist' \
  --exclude='.git' \
  --exclude='*.log' \
  --exclude='.env' \
  --exclude='.env.local' \
  --exclude='temp-archive' \
  --exclude='backups' \
  --exclude='*.zip' \
  --exclude='.DS_Store' \
  --exclude='Thumbs.db' \
  . "$TEMP_DIR/$ARCHIVE_NAME/"

# Create deployment guide
cat > "$TEMP_DIR/$ARCHIVE_NAME/DEPLOYMENT.md" << EOF
# ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ≠ŸÖŸÑÿ© ÿßŸÑÿßŸÜÿ™ÿÆÿßÿ®Ÿäÿ© - ÿØŸÑŸäŸÑ ÿßŸÑŸÜÿ¥ÿ±

## ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸÜÿ∏ÿßŸÖ

- Node.js 18+
- npm 9+
- Supabase CLI
- Git

## ÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑŸÜÿ¥ÿ±

### 1. ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ®Ÿäÿ¶ÿ© ÿßŸÑŸÖÿ≠ŸÑŸäÿ©

\`\`\`bash
# ÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑÿ™ÿ®ÿπŸäÿßÿ™
npm install

# ŸÜÿ≥ÿÆ ŸÖŸÑŸÅ ÿßŸÑÿ®Ÿäÿ¶ÿ©
cp .env.example .env

# ÿ™ÿ≠ÿØŸäÿ´ ŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ®Ÿäÿ¶ÿ© ŸÅŸä .env
\`\`\`

### 2. ÿ•ÿπÿØÿßÿØ Supabase

\`\`\`bash
# ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ•ŸÑŸâ Supabase
supabase login

# ÿ±ÿ®ÿ∑ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ
supabase link --project-ref your-project-ref

# ÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑŸÖÿßŸäÿ¨ÿ±Ÿäÿ¥ŸÜ
supabase db push

# ŸÜÿ¥ÿ± ÿßŸÑŸàÿ∏ÿßÿ¶ŸÅ
supabase functions deploy
\`\`\`

### 3. ÿßŸÑÿ®ŸÜÿßÿ° ŸàÿßŸÑŸÜÿ¥ÿ±

#### Netlify
\`\`\`bash
# ÿ®ŸÜÿßÿ° ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ
npm run build

# ŸÜÿ¥ÿ± ÿπŸÑŸâ Netlify
netlify deploy --prod --dir=dist
\`\`\`

#### Vercel
\`\`\`bash
# ŸÜÿ¥ÿ± ÿπŸÑŸâ Vercel
vercel --prod
\`\`\`

#### Docker
\`\`\`bash
# ÿ®ŸÜÿßÿ° ÿßŸÑÿµŸàÿ±ÿ©
docker build -f docker/Dockerfile -t arabic-election-system .

# ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≠ÿßŸàŸäÿ©
docker run -p 3000:80 arabic-election-system
\`\`\`

### 4. ÿ•ÿπÿØÿßÿØ ÿßŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä

\`\`\`bash
# ÿ¨ÿπŸÑ ÿ≥ŸÉÿ±Ÿäÿ®ÿ™ ÿßŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä ŸÇÿßÿ®ŸÑ ŸÑŸÑÿ™ŸÜŸÅŸäÿ∞
chmod +x scripts/backup.js

# ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸáŸÖÿ© cron ŸÑŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä ÿßŸÑŸäŸàŸÖŸä
0 2 * * * cd /path/to/project && node scripts/backup.js
\`\`\`

## ÿßŸÑÿ£ŸÖÿßŸÜ

- ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ™ÿ≠ÿØŸäÿ´ ÿ¨ŸÖŸäÿπ ŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ®Ÿäÿ¶ÿ©
- ŸÅÿπŸÑ HTTPS ŸÅŸä ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨
- ÿ±ÿßÿ¨ÿπ ÿ≥Ÿäÿßÿ≥ÿßÿ™ RLS ŸÅŸä Supabase
- ŸÇŸÖ ÿ®ÿπŸÖŸÑ ŸÜÿ≥ÿÆ ÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿäÿ© ŸÖŸÜÿ™ÿ∏ŸÖÿ©

## ÿßŸÑÿØÿπŸÖ

ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿØÿπŸÖÿå ÿ±ÿßÿ¨ÿπ ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ ÿ£Ÿà ÿßÿ™ÿµŸÑ ÿ®ŸÅÿ±ŸäŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±.
EOF

# Create production checklist
cat > "$TEMP_DIR/$ARCHIVE_NAME/PRODUCTION-CHECKLIST.md" << EOF
# ŸÇÿßÿ¶ŸÖÿ© ŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨

## ‚úÖ ŸÇÿ®ŸÑ ÿßŸÑŸÜÿ¥ÿ±

- [ ] ÿ™ÿ≠ÿØŸäÿ´ ŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ®Ÿäÿ¶ÿ© (.env.production)
- [ ] ÿßÿÆÿ™ÿ®ÿßÿ± ÿ¨ŸÖŸäÿπ ÿßŸÑŸàÿ∏ÿßÿ¶ŸÅ ŸÅŸä ÿ®Ÿäÿ¶ÿ© ÿßŸÑÿ™ÿ∑ŸàŸäÿ±
- [ ] ŸÖÿ±ÿßÿ¨ÿπÿ© ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑÿ£ŸÖÿßŸÜ ŸÅŸä Supabase
- [ ] ÿ™ŸÅÿπŸäŸÑ HTTPS
- [ ] ÿ•ÿπÿØÿßÿØ ÿßŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä
- [ ] ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿ£ÿØÿßÿ° ŸàÿßŸÑÿ≥ÿ±ÿπÿ©
- [ ] ŸÖÿ±ÿßÿ¨ÿπÿ© ÿ≥Ÿäÿßÿ≥ÿßÿ™ RLS
- [ ] ÿ™ŸÅÿπŸäŸÑ ŸÖÿ±ÿßŸÇÿ®ÿ© ÿßŸÑÿ£ÿÆÿ∑ÿßÿ°

## ‚úÖ ÿ®ÿπÿØ ÿßŸÑŸÜÿ¥ÿ±

- [ ] ÿßÿÆÿ™ÿ®ÿßÿ± ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ
- [ ] ÿßÿÆÿ™ÿ®ÿßÿ± ÿ±ŸÅÿπ ÿßŸÑŸÖŸÑŸÅÿßÿ™
- [ ] ÿßÿÆÿ™ÿ®ÿßÿ± ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™
- [ ] ŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿ≥ÿ¨ŸÑÿßÿ™ (logs)
- [ ] ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä
- [ ] ÿ™ÿØÿ±Ÿäÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
- [ ] ÿ•ÿπÿØÿßÿØ ÿßŸÑŸÖÿ±ÿßŸÇÿ®ÿ© ŸàÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™

## üîß ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨

### ŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ®Ÿäÿ¶ÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
- VITE_SUPABASE_URL
- VITE_SUPABASE_ANON_KEY
- SUPABASE_SERVICE_ROLE_KEY

### ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ£ŸÖÿßŸÜ
- ÿ™ŸÅÿπŸäŸÑ RLS ÿπŸÑŸâ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¨ÿØÿßŸàŸÑ
- ÿ≥Ÿäÿßÿ≥ÿßÿ™ Storage ŸÖÿ≠ÿØŸàÿØÿ© ÿ®ÿßŸÑŸÖÿßŸÑŸÉ
- ÿ™ÿ¥ŸÅŸäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ≥ÿ©
- ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ≥ÿ©

### ÿßŸÑŸÖÿ±ÿßŸÇÿ®ÿ©
- ŸÖÿ±ÿßŸÇÿ®ÿ© ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
- ŸÖÿ±ÿßŸÇÿ®ÿ© ÿ≠ÿ¨ŸÖ ÿßŸÑÿ™ÿÆÿ≤ŸäŸÜ
- ÿ™ÿ™ÿ®ÿπ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ŸàÿßŸÑÿßÿ≥ÿ™ÿ´ŸÜÿßÿ°ÿßÿ™
- ŸÖÿ±ÿßŸÇÿ®ÿ© ÿßŸÑÿ£ÿØÿßÿ°
EOF

# Create version info
cat > "$TEMP_DIR/$ARCHIVE_NAME/VERSION.json" << EOF
{
  "name": "ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ≠ŸÖŸÑÿ© ÿßŸÑÿßŸÜÿ™ÿÆÿßÿ®Ÿäÿ©",
  "version": "$VERSION",
  "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "gitCommit": "$(git rev-parse HEAD 2>/dev/null || echo 'unknown')",
  "nodeVersion": "$(node --version)",
  "npmVersion": "$(npm --version)",
  "features": [
    "Phone-based OTP authentication",
    "Role-based access control",
    "Real-time notifications",
    "GPS tracking for monitors",
    "Document upload and management",
    "Interactive dashboard with charts",
    "Regional heatmap visualization",
    "Automated backup system",
    "Arabic RTL interface"
  ],
  "technologies": [
    "React 18",
    "TypeScript",
    "Tailwind CSS",
    "Supabase",
    "ApexCharts",
    "Lucide Icons"
  ]
}
EOF

echo "üóúÔ∏è  Creating ZIP archive..."

# Create the ZIP file
cd "$TEMP_DIR"
zip -r "../${ARCHIVE_NAME}.zip" "$ARCHIVE_NAME"
cd ..

# Cleanup
rm -rf "$TEMP_DIR"

echo "‚úÖ Archive created successfully!"
echo "üì¶ Archive: ${ARCHIVE_NAME}.zip"
echo "üìä Archive size: $(du -h "${ARCHIVE_NAME}.zip" | cut -f1)"

# Show archive contents
echo "üìã Archive contents:"
unzip -l "${ARCHIVE_NAME}.zip" | head -20
echo "..."
echo "Total files: $(unzip -l "${ARCHIVE_NAME}.zip" | tail -1 | awk '{print $2}')"